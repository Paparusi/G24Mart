'use client'

import { useState } from 'react'
import Link from 'next/link'
import MobileBarcodeIntegration from '@/components/MobileBarcodeIntegration'
import { ScannedProductData } from '@/hooks/useEnhancedBarcodeScanner'

// Demo inventory data
const mockInventory = [
  {
    id: '1',
    name: 'Coca Cola 330ml',
    barcode: '8934673001234',
    price: 15000,
    costPrice: 12000,
    stock: 45,
    minStock: 20,
    category: 'N∆∞·ªõc Gi·∫£i Kh√°t',
    supplier: 'Coca Cola Vi·ªát Nam',
    description: 'N∆∞·ªõc ng·ªçt c√≥ gas h∆∞∆°ng cola'
  },
  {
    id: '2',
    name: 'B√°nh m√¨ sandwich',
    barcode: '8934673001235',
    price: 25000,
    costPrice: 18000,
    stock: 8,
    minStock: 15,
    category: 'Th·ª±c Ph·∫©m T∆∞∆°i S·ªëng',
    supplier: 'Ti·ªám b√°nh ƒë·ªãa ph∆∞∆°ng',
    expiryDate: '2025-08-12',
    description: 'B√°nh m√¨ sandwich th·ªãt ngu·ªôi'
  }
]

export default function InventoryTestPage() {
  const [inventory, setInventory] = useState(mockInventory)
  const [scannedProducts, setScannedProducts] = useState<ScannedProductData[]>([])

  const handleProductScanned = (productData: ScannedProductData) => {
    
    // Add to scanned products list
    setScannedProducts(prev => [productData, ...prev].slice(0, 10)) // Keep last 10
    
    // Check if product exists in inventory
    const existingProduct = inventory.find(p => p.barcode === productData.barcode)
    if (existingProduct) {
      alert(`‚úÖ S·∫£n ph·∫©m "${existingProduct.name}" ƒë√£ t·ªìn t·∫°i trong kho!\n` +
            `S·ªë l∆∞·ª£ng hi·ªán t·∫°i: ${existingProduct.stock}\n` +
            `Ph∆∞∆°ng ph√°p qu√©t: ${productData.scanMethod || 'kh√¥ng x√°c ƒë·ªãnh'}`)
    } else {
      if (confirm(`üÜï S·∫£n ph·∫©m m·ªõi: ${productData.productInfo?.name || productData.barcode}\n` +
                  `B·∫°n c√≥ mu·ªën th√™m v√†o kho kh√¥ng?`)) {
        // Add new product logic here
        const newProduct = {
          id: Date.now().toString(),
          name: productData.productInfo?.name || 'S·∫£n ph·∫©m m·ªõi',
          barcode: productData.barcode,
          price: 0,
          costPrice: 0,
          stock: 0,
          minStock: 10,
          category: productData.productInfo?.category || 'Ch∆∞a ph√¢n lo·∫°i',
          supplier: productData.productInfo?.brand || 'Ch∆∞a x√°c ƒë·ªãnh',
          description: productData.productInfo?.description || ''
        }
        setInventory(prev => [newProduct, ...prev])
        alert(`‚úÖ ƒê√£ th√™m s·∫£n ph·∫©m "${newProduct.name}" v√†o kho`)
      }
    }
  }

  const handleError = (error: string) => {
    
    alert(`‚ùå L·ªói: ${error}`)
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b">
        <div className="flex items-center justify-between px-6 py-4">
          <div className="flex items-center gap-4">
            <Link href="/dashboard" className="text-blue-600 hover:text-blue-800 font-medium">
              ‚Üê V·ªÅ Dashboard
            </Link>
            <h1 className="text-2xl font-bold text-gray-900">üì± Test Mobile Barcode Scanner</h1>
          </div>
        </div>
      </header>

      <div className="p-6 space-y-6">
        {/* Mobile Barcode Scanner */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <h2 className="text-xl font-semibold text-gray-900 mb-4">üîç Qu√©t M√£ V·∫°ch</h2>
          <MobileBarcodeIntegration
            onProductScanned={handleProductScanned}
            onError={handleError}
          />
        </div>

        {/* Recently Scanned */}
        {scannedProducts.length > 0 && (
          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <h2 className="text-xl font-semibold text-gray-900 mb-4">üìã S·∫£n Ph·∫©m V·ª´a Qu√©t</h2>
            <div className="space-y-3">
              {scannedProducts.map((product, index) => (
                <div key={index} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                  <div>
                    <div className="font-medium text-gray-900">
                      {product.productInfo?.name || `M√£ v·∫°ch: ${product.barcode}`}
                    </div>
                    <div className="text-sm text-gray-600">
                      Barcode: {product.barcode} ‚Ä¢ 
                      Ph∆∞∆°ng ph√°p: {product.scanMethod === 'camera' && 'üì± Camera'}
                      {product.scanMethod === 'keyboard' && '‚å®Ô∏è B√†n ph√≠m'}
                      {product.scanMethod === 'manual' && '‚úèÔ∏è Th·ªß c√¥ng'}
                      {!product.scanMethod && '‚ùì Kh√¥ng r√µ'}
                    </div>
                    <div className="text-xs text-gray-500">
                      {new Date(product.scanTimestamp).toLocaleString('vi-VN')} ‚Ä¢ 
                      X·ª≠ l√Ω trong {product.processingTime}ms
                    </div>
                  </div>
                  <div className="text-2xl">
                    {product.scanMethod === 'camera' && 'üì±'}
                    {product.scanMethod === 'keyboard' && '‚å®Ô∏è'}
                    {product.scanMethod === 'manual' && '‚úèÔ∏è'}
                    {!product.scanMethod && '‚ùì'}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Current Inventory */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <h2 className="text-xl font-semibold text-gray-900 mb-4">üì¶ Kho H√†ng Hi·ªán T·∫°i ({inventory.length} s·∫£n ph·∫©m)</h2>
          <div className="space-y-2">
            {inventory.map((product) => (
              <div key={product.id} className="flex items-center justify-between p-3 bg-gray-50 rounded">
                <div>
                  <div className="font-medium">{product.name}</div>
                  <div className="text-sm text-gray-600">
                    Barcode: {product.barcode} ‚Ä¢ Stock: {product.stock} ‚Ä¢ Category: {product.category}
                  </div>
                </div>
                <div className="text-right text-sm">
                  <div className="font-medium">{product.price.toLocaleString('vi-VN')} ‚Ç´</div>
                  <div className="text-gray-500">Cost: {product.costPrice.toLocaleString('vi-VN')} ‚Ç´</div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Instructions */}
        <div className="bg-blue-50 rounded-lg border border-blue-200 p-6">
          <h2 className="text-xl font-semibold text-blue-900 mb-4">üìñ H∆∞·ªõng D·∫´n S·ª≠ D·ª•ng</h2>
          <div className="space-y-2 text-blue-800">
            <p><strong>üì± Tr√™n ƒëi·ªán tho·∫°i:</strong> Nh·∫•n "Qu√©t B·∫±ng Camera" ƒë·ªÉ s·ª≠ d·ª•ng camera qu√©t m√£ v·∫°ch</p>
            <p><strong>üíª Tr√™n m√°y t√≠nh:</strong> Nh·∫•n "Qu√©t B·∫±ng B√†n Ph√≠m" ho·∫∑c "Nh·∫≠p Th·ªß C√¥ng"</p>
            <p><strong>üîç Camera Scanner:</strong> ƒê·∫∑t m√£ v·∫°ch trong khung ƒë·ªè, camera s·∫Ω t·ª± ƒë·ªông ph√°t hi·ªán</p>
            <p><strong>üîÑ Chuy·ªÉn camera:</strong> C√≥ th·ªÉ chuy·ªÉn ƒë·ªïi gi·ªØa camera tr∆∞·ªõc/sau</p>
            <p><strong>‚ö° T·ª± ƒë·ªông:</strong> Sau khi qu√©t th√†nh c√¥ng, camera s·∫Ω t·ª± ƒë·ªông ƒë√≥ng</p>
          </div>
        </div>
      </div>
    </div>
  )
}
