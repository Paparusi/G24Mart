// Lightweight Smart AI Assistant - Browser Compatible
// import natural from 'natural' // Removed - causes browser compatibility issues
// import compromise from 'compromise' // Removed - too heavy for browser

export interface SystemData {
  inventory: {
    products: Array<{
      id: string
      name: string
      price: number
      stock: number
      minStock: number
      category: string
    }>
    lowStockAlerts: Array<any>
    stockMovements: Array<any>
    reorderPoints: Array<any>
  }
  orders: {
    todayOrders: Array<any>
    paymentMethods: Array<any>
  }
  customers: {
    vipCustomers: Array<any>
  }
  system: {
    uptime: number
  }
}

export interface AIIntent {
  action: 'query' | 'create' | 'update' | 'analyze' | 'help'
  entity: 'product' | 'order' | 'customer' | 'report' | 'system' | 'inventory'
  parameters: Record<string, any>
  confidence: number
}

export class SmartAIAssistant {
  // Lightweight tokenizer thay th·∫ø natural.js
  private simpleTokenize(text: string): string[] {
    return text.toLowerCase()
      .replace(/[^\w\s√°√†·∫£√£·∫°√¢·∫•·∫ß·∫©·∫´·∫≠ƒÉ·∫Ø·∫±·∫≥·∫µ·∫∑√©√®·∫ª·∫Ω·∫π√™·∫ø·ªÅ·ªÉ·ªÖ·ªá√≠√¨·ªâƒ©·ªã√≥√≤·ªè√µ·ªç√¥·ªë·ªì·ªï·ªó·ªô∆°·ªõ·ªù·ªü·ª°·ª£√∫√π·ªß≈©·ª•∆∞·ª©·ª´·ª≠·ªØ·ª±√Ω·ª≥·ª∑·ªπ·ªµƒë]/g, ' ')
      .split(/\s+/)
      .filter(token => token.length > 0)
  }

  // Simple Vietnamese NLP patterns
  private getVietnamesePatterns() {
    return {
      queryWords: ['c√≥', 'c√≤n', 'ki·ªÉm', 'tra', 'xem', 't√¨m', 'h·ªèi'],
      createWords: ['th√™m', 't·∫°o', 'nh·∫≠p', 'l√†m', 'add', 'new'],
      updateWords: ['c·∫≠p', 'nh·∫≠t', 's·ª≠a', 'ƒë·ªïi', 'thay', 'update'],
      analyzeWords: ['ph√¢n', 't√≠ch', 'b√°o', 'c√°o', 'th·ªëng', 'k√™'],
      productWords: ['s·∫£n', 'ph·∫©m', 'h√†ng', 'pepsi', 'coca', 'sprite'],
      orderWords: ['ƒë∆°n', 'h√†ng', 'order', 'giao', 'd·ªãch'],
      inventoryWords: ['kho', 't·ªìn', 'stock', 'inventory'],
      customerWords: ['kh√°ch', 'h√†ng', 'customer', 'client']
    }
  }

  // Ph√¢n t√≠ch √Ω ƒë·ªãnh v·ªõi lightweight NLP
  analyzeIntent(message: string): AIIntent {
    const tokens = this.simpleTokenize(message)
    const patterns = this.getVietnamesePatterns()
    
    let action: AIIntent['action'] = 'query'
    let entity: AIIntent['entity'] = 'system'
    let parameters: Record<string, any> = {}
    let confidence = 0.5

    // Detect action based on word patterns
    const hasQueryWords = this.hasAnyWords(tokens, patterns.queryWords)
    const hasCreateWords = this.hasAnyWords(tokens, patterns.createWords)
    const hasUpdateWords = this.hasAnyWords(tokens, patterns.updateWords)
    const hasAnalyzeWords = this.hasAnyWords(tokens, patterns.analyzeWords)

    // Detect entity
    const hasProductWords = this.hasAnyWords(tokens, patterns.productWords)
    const hasOrderWords = this.hasAnyWords(tokens, patterns.orderWords)
    const hasInventoryWords = this.hasAnyWords(tokens, patterns.inventoryWords)
    const hasCustomerWords = this.hasAnyWords(tokens, patterns.customerWords)

    // Smart intent classification
    if (hasQueryWords && hasProductWords) {
      action = 'query'
      entity = 'product'
      confidence = 0.85
      parameters.productName = this.extractProductName(message)
    }
    else if (hasCreateWords && hasProductWords) {
      action = 'create'
      entity = 'product'
      confidence = 0.9
      parameters.productName = this.extractProductName(message)
    }
    else if (hasCreateWords && hasOrderWords) {
      action = 'create'
      entity = 'order'
      confidence = 0.8
    }
    else if (hasUpdateWords && hasProductWords) {
      action = 'update'
      entity = 'product'
      confidence = 0.8
    }
    else if (hasAnalyzeWords) {
      action = 'analyze'
      if (hasOrderWords) entity = 'order'
      else if (hasCustomerWords) entity = 'customer'
      confidence = 0.75
    }
    else if (hasInventoryWords) {
      action = 'query'
      entity = 'inventory'
      confidence = 0.7
    }

    // Boost confidence for clear patterns
    if (this.hasExactPhrase(message, ['trong kho c√≥', 'kho c√≥'])) {
      action = 'query'
      entity = 'product'
      confidence = 0.95
    }
    
    if (this.hasExactPhrase(message, ['th√™m s·∫£n ph·∫©m', 'add s·∫£n ph·∫©m'])) {
      action = 'create'
      entity = 'product'  
      confidence = 0.95
    }

    return {
      action,
      entity,
      parameters,
      confidence: Math.min(confidence, 1.0)
    }
  }

  // Helper: Check if tokens contain any of the pattern words
  private hasAnyWords(tokens: string[], patternWords: string[]): boolean {
    return tokens.some(token => 
      patternWords.some(pattern => 
        token.includes(pattern) || pattern.includes(token)
      )
    )
  }

  // Helper: Check for exact phrases
  private hasExactPhrase(message: string, phrases: string[]): boolean {
    const lowerMessage = message.toLowerCase()
    return phrases.some(phrase => lowerMessage.includes(phrase))
  }

  // Extract product name from message
  private extractProductName(message: string): string {
    const products = ['pepsi', 'coca cola', 'coca', 'sprite', 'b√°nh m√¨', 'n∆∞·ªõc', 'k·∫πo']
    
    for (const product of products) {
      if (message.toLowerCase().includes(product)) {
        return product
      }
    }
    
    // Extract potential product names (nouns after "s·∫£n ph·∫©m")
    const match = message.match(/s·∫£n ph·∫©m\s+(\w+)/i)
    return match ? match[1] : 'unknown'
  }

  // T·∫°o response th√¥ng minh d·ª±a tr√™n intent v√† data
  generateSmartResponse(intent: AIIntent, systemData: SystemData | null): string {
    const { action, entity, parameters, confidence } = intent

    if (confidence < 0.3) {
      return this.generateFallbackResponse(intent)
    }

    // Query Actions
    if (action === 'query' && entity === 'product') {
      return this.handleProductQuery(parameters.productName, systemData)
    }
    
    if (action === 'query' && entity === 'inventory') {
      return this.handleInventoryQuery(systemData)
    }

    // Create Actions  
    if (action === 'create' && entity === 'product') {
      return this.handleProductCreation(parameters.productName)
    }
    
    if (action === 'create' && entity === 'order') {
      return this.handleOrderCreation(systemData)
    }

    // Update Actions
    if (action === 'update' && entity === 'product') {
      return this.handleProductUpdate(parameters)
    }

    // Analyze Actions
    if (action === 'analyze' && entity === 'order') {
      return this.handleRevenueAnalysis(systemData)
    }

    return this.generateFallbackResponse(intent)
  }

  // X·ª≠ l√Ω truy v·∫•n s·∫£n ph·∫©m
  private handleProductQuery(productName: string, systemData: SystemData | null): string {
    if (!systemData) {
      return `‚è≥ **ƒêang k·∫øt n·ªëi v·ªõi c∆° s·ªü d·ªØ li·ªáu...**\n\nVui l√≤ng th·ª≠ l·∫°i sau v√†i gi√¢y!`
    }

    const product = systemData.inventory.products.find(p => 
      p.name.toLowerCase().includes(productName?.toLowerCase() || '')
    )

    if (product) {
      if (product.stock > 0) {
        return `‚úÖ **C√ì ${productName.toUpperCase()} TRONG KHO!**

üì¶ **Chi ti·∫øt s·∫£n ph·∫©m:**
‚Ä¢ **T√™n:** ${product.name}
‚Ä¢ **S·ªë l∆∞·ª£ng:** ${product.stock} s·∫£n ph·∫©m
‚Ä¢ **Gi√° b√°n:** ${product.price.toLocaleString('vi-VN')} ‚Ç´
‚Ä¢ **Tr·∫°ng th√°i:** ${product.stock > product.minStock ? '‚úÖ ƒê·ªß h√†ng' : '‚ö†Ô∏è S·∫Øp h·∫øt'}

üí∞ **Gi√° tr·ªã t·ªìn kho:** ${(product.price * product.stock).toLocaleString('vi-VN')} ‚Ç´
üõí **C√≥ th·ªÉ b√°n ngay t·∫°i POS!**`
      } else {
        return `‚ùå **${productName.toUpperCase()} ƒê√É H·∫æT H√ÄNG!**

üì¶ **T√¨nh tr·∫°ng:**
‚Ä¢ **S·∫£n ph·∫©m:** ${product.name}
‚Ä¢ **S·ªë l∆∞·ª£ng:** 0 s·∫£n ph·∫©m
‚Ä¢ **Tr·∫°ng th√°i:** üî¥ H·∫øt h√†ng

üí° **G·ª£i √Ω:** N√≥i "Th√™m s·∫£n ph·∫©m ${productName}" ƒë·ªÉ nh·∫≠p h√†ng m·ªõi!`
      }
    } else {
      return `üîç **KH√îNG T√åM TH·∫§Y ${productName.toUpperCase()}!**

S·∫£n ph·∫©m n√†y ch∆∞a c√≥ trong h·ªá th·ªëng.
üí° **Mu·ªën th√™m m·ªõi?** N√≥i: "Th√™m s·∫£n ph·∫©m ${productName} v√†o kho"`
    }
  }

  // X·ª≠ l√Ω truy v·∫•n kho h√†ng
  private handleInventoryQuery(systemData: SystemData | null): string {
    if (!systemData) {
      return `‚è≥ ƒêang t·∫£i d·ªØ li·ªáu kho h√†ng...`
    }

    const totalProducts = systemData.inventory.products.length
    const totalValue = systemData.inventory.products.reduce((sum, p) => sum + (p.price * p.stock), 0)
    const lowStock = systemData.inventory.lowStockAlerts.length

    return `üì¶ **T·ªîNG QUAN KHO H√ÄNG**

üìä **Th·ªëng k√™:**
‚Ä¢ **T·ªïng s·∫£n ph·∫©m:** ${totalProducts} lo·∫°i
‚Ä¢ **Gi√° tr·ªã kho:** ${totalValue.toLocaleString('vi-VN')} ‚Ç´
‚Ä¢ **C·∫£nh b√°o t·ªìn kho:** ${lowStock} s·∫£n ph·∫©m

üèÜ **Top 5 s·∫£n ph·∫©m:**
${systemData.inventory.products.slice(0, 5).map((p, i) => 
  `${i + 1}. ${p.name}: ${p.stock} s·∫£n ph·∫©m (${p.price.toLocaleString('vi-VN')} ‚Ç´)`
).join('\n')}`
  }

  // X·ª≠ l√Ω t·∫°o s·∫£n ph·∫©m m·ªõi  
  private handleProductCreation(productName: string): string {
    // Logic t·∫°o s·∫£n ph·∫©m th·ª±c s·ª± s·∫Ω ƒë∆∞·ª£c implement ·ªü component
    return `‚úÖ **CHU·∫®N B·ªä TH√äM ${productName?.toUpperCase()} V√ÄO KHO**

ü§ñ **AI Assistant s·∫Ω:**
‚Ä¢ T·∫°o s·∫£n ph·∫©m m·ªõi v·ªõi th√¥ng tin chu·∫©n
‚Ä¢ C·∫≠p nh·∫≠t v√†o c∆° s·ªü d·ªØ li·ªáu  
‚Ä¢ ƒê·ªìng b·ªô v·ªõi POS System
‚Ä¢ Thi·∫øt l·∫≠p c·∫£nh b√°o t·ªìn kho

‚è≥ **ƒêang x·ª≠ l√Ω...**`
  }

  // X·ª≠ l√Ω t·∫°o ƒë∆°n h√†ng
  private handleOrderCreation(systemData: SystemData | null): string {
    return `‚úÖ **CHU·∫®N B·ªä T·∫†O ƒê∆†N H√ÄNG M·ªöI**

ü§ñ **AI s·∫Ω t·∫°o ƒë∆°n h√†ng m·∫´u v·ªõi:**
‚Ä¢ S·∫£n ph·∫©m ph·ªï bi·∫øn nh·∫•t
‚Ä¢ Kh√°ch h√†ng VIP
‚Ä¢ Ph∆∞∆°ng th·ª©c thanh to√°n ph√π h·ª£p

‚è≥ **ƒêang x·ª≠ l√Ω...**`
  }

  // X·ª≠ l√Ω c·∫≠p nh·∫≠t s·∫£n ph·∫©m
  private handleProductUpdate(parameters: Record<string, any>): string {
    return `‚úÖ **CHU·∫®N B·ªä C·∫¨P NH·∫¨T S·∫¢N PH·∫®M**

üîß **Lo·∫°i c·∫≠p nh·∫≠t:** ${parameters.updateType || 'general'}
‚è≥ **ƒêang x·ª≠ l√Ω...**`
  }

  // Ph√¢n t√≠ch doanh thu
  private handleRevenueAnalysis(systemData: SystemData | null): string {
    if (!systemData) {
      return `‚è≥ ƒêang t·∫£i d·ªØ li·ªáu doanh thu...`
    }

    const todayRevenue = systemData.orders.todayOrders.reduce((sum: number, order: any) => sum + order.total, 0)
    const orderCount = systemData.orders.todayOrders.length

    return `üìä **PH√ÇN T√çCH DOANH THU H√îM NAY**

üí∞ **K·∫øt qu·∫£:**
‚Ä¢ **T·ªïng doanh thu:** ${todayRevenue.toLocaleString('vi-VN')} ‚Ç´
‚Ä¢ **S·ªë ƒë∆°n h√†ng:** ${orderCount}
‚Ä¢ **Gi√° tr·ªã TB/ƒë∆°n:** ${orderCount > 0 ? (todayRevenue / orderCount).toLocaleString('vi-VN') : 0} ‚Ç´

üìà **ƒê√°nh gi√°:** ${todayRevenue > 1000000 ? 'üü¢ T·ªët' : 'üü° Trung b√¨nh'}`
  }

  // Response d·ª± ph√≤ng
  private generateFallbackResponse(intent: AIIntent): string {
    return `ü§ñ **AI Assistant ƒë√£ hi·ªÉu ƒë∆∞·ª£c:**

üìù **Ph√¢n t√≠ch √Ω ƒë·ªãnh:**
‚Ä¢ **H√†nh ƒë·ªông:** ${intent.action}
‚Ä¢ **ƒê·ªëi t∆∞·ª£ng:** ${intent.entity}  
‚Ä¢ **ƒê·ªô tin c·∫≠y:** ${Math.round(intent.confidence * 100)}%

üí° **G·ª£i √Ω:** H√£y n√≥i r√µ h∆°n v·ªÅ nh·ªØng g√¨ b·∫°n mu·ªën l√†m!

**V√≠ d·ª•:**
‚Ä¢ "Trong kho c√≥ Pepsi kh√¥ng?"
‚Ä¢ "T·∫°o ƒë∆°n h√†ng m·ªõi"
‚Ä¢ "Ph√¢n t√≠ch doanh thu h√¥m nay"`
  }
}

export const smartAI = new SmartAIAssistant()
