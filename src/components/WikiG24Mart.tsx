'use client';

import { useState } from 'react';
import { Book, Search, Tag, Info, ArrowRight } from 'lucide-react';

interface WikiTerm {
  id: string;
  term: string;
  definition: string;
  category: string;
  relatedTerms: string[];
  examples?: string[];
}

const WIKI_CATEGORIES = [
  'POS & B√°n h√†ng',
  'Kho h√†ng & T·ªìn kho',
  'B√°o c√°o & Ph√¢n t√≠ch',
  'Kh√°ch h√†ng',
  'Nh√¢n vi√™n',
  'H·ªá th·ªëng',
  'T√†i ch√≠nh'
];

const WIKI_TERMS: WikiTerm[] = [
  {
    id: '1',
    term: 'POS (Point of Sale)',
    definition: 'ƒêi·ªÉm b√°n h√†ng - h·ªá th·ªëng ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ th·ª±c hi·ªán c√°c giao d·ªãch b√°n h√†ng, t√≠nh ti·ªÅn v√† in h√≥a ƒë∆°n cho kh√°ch h√†ng.',
    category: 'POS & B√°n h√†ng',
    relatedTerms: ['H√≥a ƒë∆°n', 'Thanh to√°n', 'M√°y qu√©t m√£ v·∫°ch'],
    examples: [
      'Thu ng√¢n s·ª≠ d·ª•ng POS ƒë·ªÉ t√≠nh ti·ªÅn cho kh√°ch h√†ng',
      'H·ªá th·ªëng POS t·ª± ƒë·ªông c·∫≠p nh·∫≠t t·ªìn kho sau m·ªói giao d·ªãch'
    ]
  },
  {
    id: '2',
    term: 'SKU (Stock Keeping Unit)',
    definition: 'ƒê∆°n v·ªã l∆∞u kho - m√£ ƒë·ªãnh danh duy nh·∫•t cho m·ªói s·∫£n ph·∫©m c·ª• th·ªÉ, gi√∫p theo d√µi v√† qu·∫£n l√Ω h√†ng t·ªìn kho.',
    category: 'Kho h√†ng & T·ªìn kho',
    relatedTerms: ['M√£ v·∫°ch', 'T·ªìn kho', 'S·∫£n ph·∫©m'],
    examples: [
      'SKU: "TEA-GRN-500G" cho tr√† xanh 500g',
      'M·ªói size v√† m√†u s·∫Øc kh√°c nhau s·∫Ω c√≥ SKU ri√™ng'
    ]
  },
  {
    id: '3',
    term: 'H√≥a ƒë∆°n',
    definition: 'Ch·ª©ng t·ª´ k·∫ø to√°n ghi nh·∫≠n giao d·ªãch b√°n h√†ng, bao g·ªìm th√¥ng tin s·∫£n ph·∫©m, s·ªë l∆∞·ª£ng, gi√° b√°n v√† t·ªïng ti·ªÅn.',
    category: 'POS & B√°n h√†ng',
    relatedTerms: ['POS', 'Thanh to√°n', 'Doanh thu'],
    examples: [
      'H√≥a ƒë∆°n b√°n h√†ng cho kh√°ch l·∫ª',
      'H√≥a ƒë∆°n VAT cho doanh nghi·ªáp'
    ]
  },
  {
    id: '4',
    term: 'T·ªìn kho',
    definition: 'S·ªë l∆∞·ª£ng h√†ng h√≥a hi·ªán c√≥ trong kho t·∫°i m·ªôt th·ªùi ƒëi·ªÉm nh·∫•t ƒë·ªãnh, ƒë∆∞·ª£c c·∫≠p nh·∫≠t li√™n t·ª•c khi c√≥ giao d·ªãch nh·∫≠p/xu·∫•t.',
    category: 'Kho h√†ng & T·ªìn kho',
    relatedTerms: ['SKU', 'Nh·∫≠p kho', 'Xu·∫•t kho'],
    examples: [
      'T·ªìn kho hi·ªán t·∫°i: 150 chai n∆∞·ªõc ng·ªçt',
      'C·∫£nh b√°o khi t·ªìn kho d∆∞·ªõi m·ª©c t·ªëi thi·ªÉu'
    ]
  },
  {
    id: '5',
    term: 'B√°o c√°o doanh thu',
    definition: 'B√°o c√°o t·ªïng h·ª£p doanh thu b√°n h√†ng theo ng√†y, th√°ng, qu√Ω ho·∫∑c nƒÉm, gi√∫p ƒë√°nh gi√° hi·ªáu qu·∫£ kinh doanh.',
    category: 'B√°o c√°o & Ph√¢n t√≠ch',
    relatedTerms: ['Doanh thu', 'L·ª£i nhu·∫≠n', 'Th·ªëng k√™'],
    examples: [
      'B√°o c√°o doanh thu th√°ng 8: 150.000.000ƒë',
      'So s√°nh doanh thu theo t·ª´ng s·∫£n ph·∫©m'
    ]
  },
  {
    id: '6',
    term: 'Kh√°ch h√†ng th√¢n thi·∫øt',
    definition: 'Nh√≥m kh√°ch h√†ng ƒë∆∞·ª£c ph√¢n lo·∫°i d·ª±a tr√™n t·∫ßn su·∫•t mua h√†ng v√† gi√° tr·ªã giao d·ªãch, th∆∞·ªùng ƒë∆∞·ª£c √°p d·ª•ng ch√≠nh s√°ch ∆∞u ƒë√£i.',
    category: 'Kh√°ch h√†ng',
    relatedTerms: ['ƒêi·ªÉm t√≠ch l≈©y', '∆Øu ƒë√£i', 'CRM'],
    examples: [
      'Kh√°ch VIP ƒë∆∞·ª£c gi·∫£m 10% m·ªçi ƒë∆°n h√†ng',
      'T√≠ch ƒëi·ªÉm 1% gi√° tr·ªã ƒë∆°n h√†ng'
    ]
  },
  {
    id: '7',
    term: 'Ca l√†m vi·ªác',
    definition: 'Kho·∫£ng th·ªùi gian l√†m vi·ªác c·ªßa m·ªôt nh√¢n vi√™n c·ª• th·ªÉ, gi√∫p theo d√µi gi·ªù l√†m vi·ªác v√† doanh thu theo ca.',
    category: 'Nh√¢n vi√™n',
    relatedTerms: ['Nh√¢n vi√™n', 'Doanh thu theo ca', 'Ch·∫•m c√¥ng'],
    examples: [
      'Ca s√°ng: 6:00 - 14:00',
      'Ca chi·ªÅu: 14:00 - 22:00'
    ]
  },
  {
    id: '8',
    term: 'Backup d·ªØ li·ªáu',
    definition: 'Qu√° tr√¨nh sao l∆∞u d·ªØ li·ªáu h·ªá th·ªëng ƒë·ªãnh k·ª≥ ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n th√¥ng tin v√† c√≥ th·ªÉ ph·ª•c h·ªìi khi c·∫ßn thi·∫øt.',
    category: 'H·ªá th·ªëng',
    relatedTerms: ['Sao l∆∞u', 'Ph·ª•c h·ªìi', 'An to√†n d·ªØ li·ªáu'],
    examples: [
      'Backup t·ª± ƒë·ªông h√†ng ng√†y l√∫c 2:00 s√°ng',
      'L∆∞u tr·ªØ backup tr√™n cloud v√† ·ªï c·ª©ng ngo√†i'
    ]
  },
  {
    id: '9',
    term: 'Gi√° v·ªën',
    definition: 'Chi ph√≠ mua v√†o ho·∫∑c s·∫£n xu·∫•t ra s·∫£n ph·∫©m, ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ t√≠nh to√°n l·ª£i nhu·∫≠n v√† ƒë·ªãnh gi√° b√°n.',
    category: 'T√†i ch√≠nh',
    relatedTerms: ['Gi√° b√°n', 'L·ª£i nhu·∫≠n', 'T·ª∑ su·∫•t l·ª£i nhu·∫≠n'],
    examples: [
      'Gi√° v·ªën: 15.000ƒë, gi√° b√°n: 20.000ƒë',
      'L·ª£i nhu·∫≠n: 5.000ƒë (25%)'
    ]
  },
  {
    id: '10',
    term: 'M√£ v·∫°ch',
    definition: 'M√£ ƒë·ªãnh danh s·∫£n ph·∫©m d∆∞·ªõi d·∫°ng c√°c v·∫°ch ƒëen tr·∫Øng, c√≥ th·ªÉ qu√©t b·∫±ng m√°y qu√©t ƒë·ªÉ nh·∫≠p th√¥ng tin s·∫£n ph·∫©m nhanh ch√≥ng.',
    category: 'POS & B√°n h√†ng',
    relatedTerms: ['SKU', 'M√°y qu√©t', 'S·∫£n ph·∫©m'],
    examples: [
      'M√£ v·∫°ch 13 s·ªë theo chu·∫©n EAN-13',
      'Qu√©t m√£ v·∫°ch ƒë·ªÉ th√™m s·∫£n ph·∫©m v√†o ƒë∆°n h√†ng'
    ]
  }
];

export default function WikiG24Mart() {
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [selectedTerm, setSelectedTerm] = useState<WikiTerm | null>(null);

  const filteredTerms = WIKI_TERMS.filter(term => {
    const matchesSearch = term.term.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         term.definition.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesCategory = selectedCategory === 'all' || term.category === selectedCategory;
    return matchesSearch && matchesCategory;
  });

  const getCategoryColor = (category: string) => {
    const colors = {
      'POS & B√°n h√†ng': 'bg-blue-100 text-blue-800',
      'Kho h√†ng & T·ªìn kho': 'bg-green-100 text-green-800',
      'B√°o c√°o & Ph√¢n t√≠ch': 'bg-purple-100 text-purple-800',
      'Kh√°ch h√†ng': 'bg-pink-100 text-pink-800',
      'Nh√¢n vi√™n': 'bg-orange-100 text-orange-800',
      'H·ªá th·ªëng': 'bg-gray-100 text-gray-800',
      'T√†i ch√≠nh': 'bg-yellow-100 text-yellow-800'
    };
    return colors[category as keyof typeof colors] || 'bg-gray-100 text-gray-800';
  };

  return (
    <div className="p-6 bg-white rounded-lg shadow-lg">
      {/* Header */}
      <div className="text-center mb-8">
        <div className="flex items-center justify-center mb-4">
          <Book className="w-12 h-12 text-blue-600 mr-4" />
          <h2 className="text-4xl font-bold text-gray-800">Wiki G24Mart</h2>
        </div>
        <p className="text-xl text-gray-600 max-w-3xl mx-auto">
          T·ª´ ƒëi·ªÉn thu·∫≠t ng·ªØ to√†n di·ªán cho h·ªá th·ªëng qu·∫£n l√Ω b√°n h√†ng - Hi·ªÉu r√µ m·ªçi kh√°i ni·ªám ƒë·ªÉ s·ª≠ d·ª•ng hi·ªáu qu·∫£ nh·∫•t
        </p>
      </div>

      {/* Search and Filter */}
      <div className="flex flex-col md:flex-row gap-4 mb-8">
        <div className="flex-1 relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
          <input
            type="text"
            placeholder="T√¨m ki·∫øm thu·∫≠t ng·ªØ ho·∫∑c ƒë·ªãnh nghƒ©a..."
            className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>
        <select
          className="px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          value={selectedCategory}
          onChange={(e) => setSelectedCategory(e.target.value)}
        >
          <option value="all">T·∫•t c·∫£ danh m·ª•c</option>
          {WIKI_CATEGORIES.map(category => (
            <option key={category} value={category}>{category}</option>
          ))}
        </select>
      </div>

      {/* Statistics */}
      <div className="grid grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
        <div className="bg-blue-50 p-4 rounded-lg text-center">
          <div className="text-2xl font-bold text-blue-600">{WIKI_TERMS.length}</div>
          <div className="text-sm text-gray-600">T·ªïng thu·∫≠t ng·ªØ</div>
        </div>
        <div className="bg-green-50 p-4 rounded-lg text-center">
          <div className="text-2xl font-bold text-green-600">{WIKI_CATEGORIES.length}</div>
          <div className="text-sm text-gray-600">Danh m·ª•c</div>
        </div>
        <div className="bg-purple-50 p-4 rounded-lg text-center">
          <div className="text-2xl font-bold text-purple-600">{filteredTerms.length}</div>
          <div className="text-sm text-gray-600">K·∫øt qu·∫£ t√¨m ki·∫øm</div>
        </div>
        <div className="bg-orange-50 p-4 rounded-lg text-center">
          <div className="text-2xl font-bold text-orange-600">100%</div>
          <div className="text-sm text-gray-600">Mi·ªÖn ph√≠</div>
        </div>
      </div>

      <div className="grid lg:grid-cols-3 gap-8">
        {/* Terms List */}
        <div className="lg:col-span-2">
          <h3 className="text-xl font-semibold mb-4">üìö Danh s√°ch thu·∫≠t ng·ªØ</h3>
          <div className="space-y-4 max-h-96 overflow-y-auto">
            {filteredTerms.map((term) => (
              <div
                key={term.id}
                className={`border rounded-lg p-4 cursor-pointer transition-all hover:shadow-md ${
                  selectedTerm?.id === term.id ? 'border-blue-500 bg-blue-50' : 'border-gray-200'
                }`}
                onClick={() => setSelectedTerm(term)}
              >
                <div className="flex items-start justify-between mb-2">
                  <h4 className="text-lg font-semibold text-gray-800">{term.term}</h4>
                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${getCategoryColor(term.category)}`}>
                    {term.category}
                  </span>
                </div>
                <p className="text-gray-600 text-sm line-clamp-2 mb-2">
                  {term.definition}
                </p>
                <div className="flex items-center text-blue-600 text-sm">
                  Xem chi ti·∫øt <ArrowRight className="w-4 h-4 ml-1" />
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Term Details */}
        <div className="lg:col-span-1">
          {selectedTerm ? (
            <div className="border rounded-lg p-6 bg-gray-50">
              <div className="flex items-center mb-4">
                <Info className="w-6 h-6 text-blue-600 mr-2" />
                <h3 className="text-xl font-semibold">Chi ti·∫øt thu·∫≠t ng·ªØ</h3>
              </div>
              
              <div className="space-y-4">
                <div>
                  <h4 className="text-2xl font-bold text-gray-800 mb-2">
                    {selectedTerm.term}
                  </h4>
                  <span className={`px-3 py-1 rounded-full text-sm font-medium ${getCategoryColor(selectedTerm.category)}`}>
                    {selectedTerm.category}
                  </span>
                </div>

                <div>
                  <h5 className="font-semibold text-gray-700 mb-2">üìù ƒê·ªãnh nghƒ©a:</h5>
                  <p className="text-gray-600 leading-relaxed">
                    {selectedTerm.definition}
                  </p>
                </div>

                {selectedTerm.examples && selectedTerm.examples.length > 0 && (
                  <div>
                    <h5 className="font-semibold text-gray-700 mb-2">üí° V√≠ d·ª•:</h5>
                    <ul className="space-y-2">
                      {selectedTerm.examples.map((example, index) => (
                        <li key={index} className="text-gray-600 text-sm flex items-start">
                          <span className="w-2 h-2 bg-blue-500 rounded-full mr-2 mt-2 flex-shrink-0"></span>
                          {example}
                        </li>
                      ))}
                    </ul>
                  </div>
                )}

                <div>
                  <h5 className="font-semibold text-gray-700 mb-2">üîó Thu·∫≠t ng·ªØ li√™n quan:</h5>
                  <div className="flex flex-wrap gap-2">
                    {selectedTerm.relatedTerms.map((relatedTerm, index) => (
                      <span
                        key={index}
                        className="px-2 py-1 bg-white text-blue-600 border border-blue-200 rounded-full text-sm cursor-pointer hover:bg-blue-50"
                        onClick={() => {
                          const found = WIKI_TERMS.find(t => t.term === relatedTerm);
                          if (found) setSelectedTerm(found);
                        }}
                      >
                        {relatedTerm}
                      </span>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          ) : (
            <div className="border rounded-lg p-6 bg-gray-50 text-center">
              <Book className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <h4 className="text-lg font-semibold text-gray-600 mb-2">
                Ch·ªçn thu·∫≠t ng·ªØ ƒë·ªÉ xem chi ti·∫øt
              </h4>
              <p className="text-gray-500">
                Click v√†o b·∫•t k·ª≥ thu·∫≠t ng·ªØ n√†o b√™n tr√°i ƒë·ªÉ xem ƒë·ªãnh nghƒ©a v√† v√≠ d·ª• chi ti·∫øt
              </p>
            </div>
          )}
        </div>
      </div>

      {/* Quick Access Categories */}
      <div className="mt-8">
        <h3 className="text-xl font-semibold mb-4">üè∑Ô∏è Danh m·ª•c nhanh</h3>
        <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-7 gap-4">
          {WIKI_CATEGORIES.map((category) => {
            const termCount = WIKI_TERMS.filter(t => t.category === category).length;
            return (
              <button
                key={category}
                onClick={() => setSelectedCategory(category)}
                className={`p-4 rounded-lg text-center border transition-all hover:shadow-md ${
                  selectedCategory === category
                    ? 'border-blue-500 bg-blue-50'
                    : 'border-gray-200 hover:border-gray-300'
                }`}
              >
                <Tag className="w-6 h-6 mx-auto mb-2 text-gray-600" />
                <div className="text-sm font-medium text-gray-800">{category}</div>
                <div className="text-xs text-gray-500">{termCount} thu·∫≠t ng·ªØ</div>
              </button>
            );
          })}
        </div>
      </div>

      {/* Comparison */}
      <div className="mt-8 p-6 bg-gradient-to-r from-green-50 to-blue-50 rounded-lg">
        <h3 className="text-xl font-semibold text-center mb-4">üöÄ V∆∞·ª£t tr·ªôi h∆°n KiotViet Wiki</h3>
        <div className="grid md:grid-cols-2 gap-6">
          <div>
            <h4 className="font-medium text-green-600 mb-2">‚úÖ Wiki G24Mart</h4>
            <ul className="text-sm space-y-1">
              <li>‚Ä¢ Truy c·∫≠p t·ª©c th√¨, kh√¥ng c·∫ßn ƒëƒÉng nh·∫≠p</li>
              <li>‚Ä¢ T√¨m ki·∫øm nhanh v√† ch√≠nh x√°c</li>
              <li>‚Ä¢ Giao di·ªán th√¢n thi·ªán, d·ªÖ hi·ªÉu</li>
              <li>‚Ä¢ V√≠ d·ª• th·ª±c t·∫ø v√† thu·∫≠t ng·ªØ li√™n quan</li>
              <li>‚Ä¢ Ho·∫°t ƒë·ªông offline ho√†n to√†n</li>
              <li>‚Ä¢ C·∫≠p nh·∫≠t li√™n t·ª•c, mi·ªÖn ph√≠</li>
            </ul>
          </div>
          <div>
            <h4 className="font-medium text-red-600 mb-2">‚ùå KiotViet Wiki</h4>
            <ul className="text-sm space-y-1">
              <li>‚Ä¢ Hi·ªán t·∫°i l·ªói 503, kh√¥ng truy c·∫≠p ƒë∆∞·ª£c</li>
              <li>‚Ä¢ C·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ xem</li>
              <li>‚Ä¢ T√¨m ki·∫øm h·∫°n ch·∫ø</li>
              <li>‚Ä¢ Thi·∫øu v√≠ d·ª• th·ª±c t·∫ø</li>
              <li>‚Ä¢ Ph·ª• thu·ªôc internet</li>
              <li>‚Ä¢ N·ªôi dung √≠t, c·∫≠p nh·∫≠t ch·∫≠m</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
}
