'use client';

import { useState } from 'react';
import { Users, Plus, Edit, Trash2, Eye, EyeOff, UserCheck, Shield, Clock } from 'lucide-react';

interface User {
  id: string;
  username: string;
  fullName: string;
  email: string;
  phone: string;
  role: 'owner' | 'manager' | 'cashier' | 'staff';
  permissions: string[];
  isActive: boolean;
  lastLogin: Date | null;
  createdAt: Date;
}

interface Permission {
  id: string;
  name: string;
  description: string;
  category: string;
}

const PERMISSIONS: Permission[] = [
  { id: 'pos_access', name: 'Truy c·∫≠p POS', description: 'C√≥ th·ªÉ s·ª≠ d·ª•ng h·ªá th·ªëng b√°n h√†ng', category: 'POS' },
  { id: 'pos_discount', name: '√Åp d·ª•ng gi·∫£m gi√°', description: 'C√≥ th·ªÉ gi·∫£m gi√° s·∫£n ph·∫©m', category: 'POS' },
  { id: 'pos_refund', name: 'Ho√†n tr·∫£ h√†ng', description: 'C√≥ th·ªÉ th·ª±c hi·ªán ho√†n tr·∫£', category: 'POS' },
  { id: 'inventory_view', name: 'Xem kho h√†ng', description: 'C√≥ th·ªÉ xem th√¥ng tin kho', category: 'Kho h√†ng' },
  { id: 'inventory_edit', name: 'Ch·ªânh s·ª≠a kho', description: 'C√≥ th·ªÉ th√™m/s·ª≠a s·∫£n ph·∫©m', category: 'Kho h√†ng' },
  { id: 'inventory_import', name: 'Nh·∫≠p h√†ng', description: 'C√≥ th·ªÉ th·ª±c hi·ªán nh·∫≠p h√†ng', category: 'Kho h√†ng' },
  { id: 'reports_view', name: 'Xem b√°o c√°o', description: 'C√≥ th·ªÉ xem c√°c b√°o c√°o', category: 'B√°o c√°o' },
  { id: 'reports_export', name: 'Xu·∫•t b√°o c√°o', description: 'C√≥ th·ªÉ xu·∫•t file b√°o c√°o', category: 'B√°o c√°o' },
  { id: 'users_view', name: 'Xem nh√¢n vi√™n', description: 'C√≥ th·ªÉ xem danh s√°ch nh√¢n vi√™n', category: 'Qu·∫£n l√Ω' },
  { id: 'users_manage', name: 'Qu·∫£n l√Ω nh√¢n vi√™n', description: 'C√≥ th·ªÉ th√™m/s·ª≠a/x√≥a nh√¢n vi√™n', category: 'Qu·∫£n l√Ω' },
  { id: 'settings_view', name: 'Xem c√†i ƒë·∫∑t', description: 'C√≥ th·ªÉ xem c√†i ƒë·∫∑t h·ªá th·ªëng', category: 'H·ªá th·ªëng' },
  { id: 'settings_edit', name: 'Ch·ªânh s·ª≠a c√†i ƒë·∫∑t', description: 'C√≥ th·ªÉ thay ƒë·ªïi c√†i ƒë·∫∑t', category: 'H·ªá th·ªëng' }
];

const ROLE_PERMISSIONS = {
  owner: PERMISSIONS.map(p => p.id),
  manager: ['pos_access', 'pos_discount', 'pos_refund', 'inventory_view', 'inventory_edit', 'inventory_import', 'reports_view', 'reports_export', 'users_view', 'settings_view'],
  cashier: ['pos_access', 'pos_discount', 'inventory_view', 'reports_view'],
  staff: ['pos_access', 'inventory_view']
};

const ROLE_NAMES = {
  owner: 'Ch·ªß c·ª≠a h√†ng',
  manager: 'Qu·∫£n l√Ω',
  cashier: 'Thu ng√¢n',
  staff: 'Nh√¢n vi√™n'
};

const MOCK_USERS: User[] = [
  {
    id: '1',
    username: 'admin',
    fullName: 'Nguy·ªÖn VƒÉn An',
    email: 'admin@g24mart.com',
    phone: '0123456789',
    role: 'owner',
    permissions: ROLE_PERMISSIONS.owner,
    isActive: true,
    lastLogin: new Date(),
    createdAt: new Date('2024-01-01')
  },
  {
    id: '2',
    username: 'manager01',
    fullName: 'Tr·∫ßn Th·ªã B√¨nh',
    email: 'manager@g24mart.com',
    phone: '0987654321',
    role: 'manager',
    permissions: ROLE_PERMISSIONS.manager,
    isActive: true,
    lastLogin: new Date(),
    createdAt: new Date('2024-01-15')
  },
  {
    id: '3',
    username: 'cashier01',
    fullName: 'L√™ VƒÉn C∆∞·ªùng',
    email: 'cashier@g24mart.com',
    phone: '0912345678',
    role: 'cashier',
    permissions: ROLE_PERMISSIONS.cashier,
    isActive: true,
    lastLogin: new Date(),
    createdAt: new Date('2024-02-01')
  }
];

export default function UserManagement() {
  const [users, setUsers] = useState<User[]>(MOCK_USERS);
  const [showModal, setShowModal] = useState(false);
  const [selectedUser, setSelectedUser] = useState<User | null>(null);
  const [formData, setFormData] = useState({
    username: '',
    fullName: '',
    email: '',
    phone: '',
    role: 'staff' as User['role'],
    password: '',
    confirmPassword: ''
  });

  const createUser = () => {
    if (formData.password !== formData.confirmPassword) {
      alert('M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!');
      return;
    }

    const newUser: User = {
      id: Date.now().toString(),
      username: formData.username,
      fullName: formData.fullName,
      email: formData.email,
      phone: formData.phone,
      role: formData.role,
      permissions: ROLE_PERMISSIONS[formData.role],
      isActive: true,
      lastLogin: null,
      createdAt: new Date()
    };

    setUsers([...users, newUser]);
    setShowModal(false);
    resetForm();
    alert('T·∫°o t√†i kho·∫£n th√†nh c√¥ng!');
  };

  const editUser = () => {
    if (!selectedUser) return;

    setUsers(users.map(user => 
      user.id === selectedUser.id 
        ? {
            ...user,
            fullName: formData.fullName,
            email: formData.email,
            phone: formData.phone,
            role: formData.role,
            permissions: ROLE_PERMISSIONS[formData.role]
          }
        : user
    ));

    setShowModal(false);
    setSelectedUser(null);
    resetForm();
    alert('C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!');
  };

  const toggleUserStatus = (userId: string) => {
    setUsers(users.map(user => 
      user.id === userId 
        ? { ...user, isActive: !user.isActive }
        : user
    ));
  };

  const deleteUser = (userId: string) => {
    if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a t√†i kho·∫£n n√†y?')) {
      setUsers(users.filter(user => user.id !== userId));
      alert('X√≥a t√†i kho·∫£n th√†nh c√¥ng!');
    }
  };

  const openAddModal = () => {
    setSelectedUser(null);
    resetForm();
    setShowModal(true);
  };

  const openEditModal = (user: User) => {
    setSelectedUser(user);
    setFormData({
      username: user.username,
      fullName: user.fullName,
      email: user.email,
      phone: user.phone,
      role: user.role,
      password: '',
      confirmPassword: ''
    });
    setShowModal(true);
  };

  const resetForm = () => {
    setFormData({
      username: '',
      fullName: '',
      email: '',
      phone: '',
      role: 'staff',
      password: '',
      confirmPassword: ''
    });
  };

  const getRoleColor = (role: User['role']) => {
    const colors = {
      owner: 'bg-red-100 text-red-800',
      manager: 'bg-blue-100 text-blue-800',
      cashier: 'bg-green-100 text-green-800',
      staff: 'bg-gray-100 text-gray-800'
    };
    return colors[role];
  };

  return (
    <div className="p-6 bg-white rounded-lg shadow-lg">
      {/* Header */}
      <div className="flex justify-between items-center mb-8">
        <div>
          <h2 className="text-3xl font-bold text-gray-800 mb-2">
            üë• Qu·∫£n l√Ω ng∆∞·ªùi d√πng
          </h2>
          <p className="text-gray-600">
            Qu·∫£n l√Ω t√†i kho·∫£n v√† ph√¢n quy·ªÅn nh√¢n vi√™n trong c·ª≠a h√†ng
          </p>
        </div>
        <button
          onClick={openAddModal}
          className="bg-blue-500 text-white px-6 py-3 rounded-lg hover:bg-blue-600 transition-colors flex items-center gap-2"
        >
          <Plus className="w-5 h-5" />
          Th√™m nh√¢n vi√™n
        </button>
      </div>

      {/* Stats */}
      <div className="grid grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
        <div className="bg-blue-50 p-4 rounded-lg text-center">
          <Users className="w-8 h-8 text-blue-500 mx-auto mb-2" />
          <div className="text-2xl font-bold text-blue-600">{users.length}</div>
          <div className="text-sm text-gray-600">T·ªïng s·ªë t√†i kho·∫£n</div>
        </div>
        <div className="bg-green-50 p-4 rounded-lg text-center">
          <UserCheck className="w-8 h-8 text-green-500 mx-auto mb-2" />
          <div className="text-2xl font-bold text-green-600">
            {users.filter(u => u.isActive).length}
          </div>
          <div className="text-sm text-gray-600">ƒêang ho·∫°t ƒë·ªông</div>
        </div>
        <div className="bg-orange-50 p-4 rounded-lg text-center">
          <Shield className="w-8 h-8 text-orange-500 mx-auto mb-2" />
          <div className="text-2xl font-bold text-orange-600">
            {users.filter(u => u.role === 'manager').length}
          </div>
          <div className="text-sm text-gray-600">Qu·∫£n l√Ω</div>
        </div>
        <div className="bg-purple-50 p-4 rounded-lg text-center">
          <Clock className="w-8 h-8 text-purple-500 mx-auto mb-2" />
          <div className="text-2xl font-bold text-purple-600">
            {users.filter(u => u.lastLogin && 
              new Date().getTime() - u.lastLogin.getTime() < 24 * 60 * 60 * 1000
            ).length}
          </div>
          <div className="text-sm text-gray-600">Ho·∫°t ƒë·ªông 24h</div>
        </div>
      </div>

      {/* Users Table */}
      <div className="overflow-x-auto">
        <table className="w-full bg-white border border-gray-200 rounded-lg">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-sm font-medium text-gray-500">Th√¥ng tin</th>
              <th className="px-6 py-3 text-left text-sm font-medium text-gray-500">Vai tr√≤</th>
              <th className="px-6 py-3 text-left text-sm font-medium text-gray-500">Tr·∫°ng th√°i</th>
              <th className="px-6 py-3 text-left text-sm font-medium text-gray-500">L·∫ßn ƒëƒÉng nh·∫≠p cu·ªëi</th>
              <th className="px-6 py-3 text-left text-sm font-medium text-gray-500">Thao t√°c</th>
            </tr>
          </thead>
          <tbody className="divide-y divide-gray-200">
            {users.map((user) => (
              <tr key={user.id} className="hover:bg-gray-50">
                <td className="px-6 py-4">
                  <div>
                    <div className="font-medium text-gray-900">{user.fullName}</div>
                    <div className="text-sm text-gray-500">@{user.username}</div>
                    <div className="text-sm text-gray-500">{user.email}</div>
                    <div className="text-sm text-gray-500">{user.phone}</div>
                  </div>
                </td>
                <td className="px-6 py-4">
                  <span className={`px-3 py-1 rounded-full text-sm font-medium ${getRoleColor(user.role)}`}>
                    {ROLE_NAMES[user.role]}
                  </span>
                </td>
                <td className="px-6 py-4">
                  <button
                    onClick={() => toggleUserStatus(user.id)}
                    className={`px-3 py-1 rounded-full text-sm font-medium ${
                      user.isActive 
                        ? 'bg-green-100 text-green-800' 
                        : 'bg-red-100 text-red-800'
                    }`}
                  >
                    {user.isActive ? 'Ho·∫°t ƒë·ªông' : 'T·∫°m kh√≥a'}
                  </button>
                </td>
                <td className="px-6 py-4 text-sm text-gray-500">
                  {user.lastLogin 
                    ? user.lastLogin.toLocaleDateString('vi-VN')
                    : 'Ch∆∞a ƒëƒÉng nh·∫≠p'
                  }
                </td>
                <td className="px-6 py-4">
                  <div className="flex gap-2">
                    <button
                      onClick={() => openEditModal(user)}
                      className="text-blue-600 hover:text-blue-800"
                    >
                      <Edit className="w-5 h-5" />
                    </button>
                    {user.role !== 'owner' && (
                      <button
                        onClick={() => deleteUser(user.id)}
                        className="text-red-600 hover:text-red-800"
                      >
                        <Trash2 className="w-5 h-5" />
                      </button>
                    )}
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Add/Edit Modal */}
      {showModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-8 max-w-2xl w-full m-4 max-h-screen overflow-y-auto">
            <h3 className="text-xl font-semibold mb-6">
              {selectedUser ? 'Ch·ªânh s·ª≠a nh√¢n vi√™n' : 'Th√™m nh√¢n vi√™n m·ªõi'}
            </h3>
            
            <div className="grid md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  T√™n ƒëƒÉng nh·∫≠p *
                </label>
                <input
                  type="text"
                  value={formData.username}
                  onChange={(e) => setFormData({...formData, username: e.target.value})}
                  disabled={!!selectedUser}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 disabled:bg-gray-100"
                  placeholder="username"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  H·ªç v√† t√™n *
                </label>
                <input
                  type="text"
                  value={formData.fullName}
                  onChange={(e) => setFormData({...formData, fullName: e.target.value})}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                  placeholder="Nguy·ªÖn VƒÉn A"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Email
                </label>
                <input
                  type="email"
                  value={formData.email}
                  onChange={(e) => setFormData({...formData, email: e.target.value})}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                  placeholder="email@example.com"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  S·ªë ƒëi·ªán tho·∫°i *
                </label>
                <input
                  type="tel"
                  value={formData.phone}
                  onChange={(e) => setFormData({...formData, phone: e.target.value})}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                  placeholder="0123456789"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Vai tr√≤ *
                </label>
                <select
                  value={formData.role}
                  onChange={(e) => setFormData({...formData, role: e.target.value as User['role']})}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                >
                  <option value="staff">Nh√¢n vi√™n</option>
                  <option value="cashier">Thu ng√¢n</option>
                  <option value="manager">Qu·∫£n l√Ω</option>
                </select>
              </div>
              
              {!selectedUser && (
                <>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      M·∫≠t kh·∫©u *
                    </label>
                    <input
                      type="password"
                      value={formData.password}
                      onChange={(e) => setFormData({...formData, password: e.target.value})}
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                      placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      X√°c nh·∫≠n m·∫≠t kh·∫©u *
                    </label>
                    <input
                      type="password"
                      value={formData.confirmPassword}
                      onChange={(e) => setFormData({...formData, confirmPassword: e.target.value})}
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                      placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                    />
                  </div>
                </>
              )}
            </div>

            {/* Permissions */}
            <div className="mt-6">
              <h4 className="text-lg font-medium mb-4">Quy·ªÅn h·∫°n theo vai tr√≤:</h4>
              <div className="bg-gray-50 p-4 rounded-lg">
                <div className="grid md:grid-cols-2 gap-2 text-sm">
                  {ROLE_PERMISSIONS[formData.role].map(permissionId => {
                    const permission = PERMISSIONS.find(p => p.id === permissionId);
                    return permission ? (
                      <div key={permission.id} className="flex items-center text-green-600">
                        <div className="w-2 h-2 bg-green-500 rounded-full mr-2"></div>
                        {permission.name}
                      </div>
                    ) : null;
                  })}
                </div>
              </div>
            </div>
            
            <div className="flex gap-3 mt-8">
              <button
                onClick={() => setShowModal(false)}
                className="flex-1 bg-gray-200 text-gray-800 px-4 py-2 rounded-lg hover:bg-gray-300 transition-colors"
              >
                H·ªßy
              </button>
              <button
                onClick={selectedUser ? editUser : createUser}
                disabled={
                  !formData.username || !formData.fullName || !formData.phone ||
                  (!selectedUser && (!formData.password || formData.password !== formData.confirmPassword))
                }
                className="flex-1 bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors"
              >
                {selectedUser ? 'C·∫≠p nh·∫≠t' : 'T·∫°o t√†i kho·∫£n'}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Comparison */}
      <div className="mt-8 p-6 bg-gradient-to-r from-blue-50 to-green-50 rounded-lg">
        <h3 className="text-xl font-semibold text-center mb-4">üöÄ V∆∞·ª£t tr·ªôi h∆°n KiotViet User Management</h3>
        <div className="grid md:grid-cols-2 gap-6">
          <div>
            <h4 className="font-medium text-green-600 mb-2">‚úÖ G24Mart</h4>
            <ul className="text-sm space-y-1">
              <li>‚Ä¢ T·∫°o t√†i kho·∫£n t·ª©c th√¨, kh√¥ng gi·ªõi h·∫°n</li>
              <li>‚Ä¢ Ph√¢n quy·ªÅn chi ti·∫øt v√† linh ho·∫°t</li>
              <li>‚Ä¢ Giao di·ªán th√¢n thi·ªán, d·ªÖ s·ª≠ d·ª•ng</li>
              <li>‚Ä¢ Ho·∫°t ƒë·ªông offline ho√†n to√†n</li>
              <li>‚Ä¢ Theo d√µi ho·∫°t ƒë·ªông realtime</li>
              <li>‚Ä¢ Kh√¥ng ph√≠ qu·∫£n l√Ω nh√¢n vi√™n</li>
            </ul>
          </div>
          <div>
            <h4 className="font-medium text-red-600 mb-2">‚ùå KiotViet</h4>
            <ul className="text-sm space-y-1">
              <li>‚Ä¢ Hi·ªán t·∫°i l·ªói 503, kh√¥ng truy c·∫≠p ƒë∆∞·ª£c</li>
              <li>‚Ä¢ Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng t√†i kho·∫£n theo g√≥i</li>
              <li>‚Ä¢ Ph√¢n quy·ªÅn c·ª©ng nh·∫Øc</li>
              <li>‚Ä¢ Ph·ª• thu·ªôc internet</li>
              <li>‚Ä¢ Giao di·ªán ph·ª©c t·∫°p</li>
              <li>‚Ä¢ Ph√≠ th√™m cho nhi·ªÅu t√†i kho·∫£n</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
}
