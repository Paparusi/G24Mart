'use client'

import { useState } from 'react'
import { useEnhancedBarcodeScanner, ScannedProductData } from '@/hooks/useEnhancedBarcodeScanner'
import MobileBarcodeCamera from '@/components/MobileBarcodeCamera'

interface MobileBarcodeIntegrationProps {
  onProductScanned: (productData: ScannedProductData) => void
  onError?: (error: string) => void
}

export default function MobileBarcodeIntegration({
  onProductScanned,
  onError
}: MobileBarcodeIntegrationProps) {
  const [showCameraButton, setShowCameraButton] = useState(true)

  const scanner = useEnhancedBarcodeScanner({
    onProductFound: (productData) => {
      onProductScanned(productData)
    },
    onError: (error) => {
      onError?.(error)
    },
    showApiProgress: true
  })

  // Ki·ªÉm tra xem c√≥ ph·∫£i thi·∫øt b·ªã mobile kh√¥ng
  const isMobile = () => {
    if (typeof window === 'undefined') return false
    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)
  }

  // Ki·ªÉm tra camera support
  const isCameraSupported = () => {
    return !!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia)
  }

  if (!isCameraSupported()) {
    return (
      <div className="p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
        <div className="flex items-center gap-2">
          <span className="text-yellow-600">‚ö†Ô∏è</span>
          <span className="text-yellow-800">Camera kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ tr√™n thi·∫øt b·ªã n√†y</span>
        </div>
      </div>
    )
  }

  return (
    <div className="space-y-4">
      {/* Scanner Controls */}
      <div className="flex flex-wrap gap-2">
        {/* Camera Button - Visible on all devices but optimized for mobile */}
        <button
          onClick={scanner.startCameraScanning}
          disabled={scanner.isProcessing || scanner.isCameraActive}
          className={`flex items-center gap-2 px-4 py-3 rounded-lg font-medium transition-colors ${
            isMobile() 
              ? 'bg-blue-600 hover:bg-blue-700 text-white flex-1 min-w-[200px]' 
              : 'bg-blue-100 hover:bg-blue-200 text-blue-800 border border-blue-300'
          } disabled:opacity-50 disabled:cursor-not-allowed`}
        >
          <span className="text-lg">üì±</span>
          <span>{isMobile() ? 'Qu√©t B·∫±ng Camera' : 'Qu√©t B·∫±ng Camera (Mobile)'}</span>
        </button>

        {/* Keyboard Scanner - Desktop focused */}
        {!isMobile() && (
          <button
            onClick={scanner.startKeyboardScanning}
            disabled={scanner.isProcessing || scanner.isScanning}
            className="flex items-center gap-2 px-4 py-2 bg-gray-100 hover:bg-gray-200 text-gray-800 border border-gray-300 rounded-lg font-medium transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <span>‚å®Ô∏è</span>
            <span>Qu√©t B·∫±ng B√†n Ph√≠m</span>
          </button>
        )}

        {/* Manual Input */}
        <button
          onClick={() => {
            const barcode = prompt('Nh·∫≠p m√£ v·∫°ch:')
            if (barcode && barcode.trim()) {
              scanner.manualScan(barcode.trim())
            }
          }}
          disabled={scanner.isProcessing}
          className="flex items-center gap-2 px-4 py-2 bg-gray-100 hover:bg-gray-200 text-gray-800 border border-gray-300 rounded-lg font-medium transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
        >
          <span>‚úèÔ∏è</span>
          <span>Nh·∫≠p Th·ªß C√¥ng</span>
        </button>
      </div>

      {/* Scanner Status */}
      {scanner.isScanning && (
        <div className="p-3 bg-blue-50 border border-blue-200 rounded-lg">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <span className="text-blue-600">‚å®Ô∏è</span>
              <span className="text-blue-800 font-medium">ƒêang ch·ªù qu√©t b·∫±ng b√†n ph√≠m...</span>
            </div>
            <button
              onClick={scanner.stopScanning}
              className="px-3 py-1 text-sm bg-blue-100 hover:bg-blue-200 text-blue-800 rounded-md"
            >
              D·ª´ng
            </button>
          </div>
          <p className="text-sm text-blue-600 mt-1">
            Qu√©t m√£ v·∫°ch ho·∫∑c nh·∫≠p s·ªë b·∫±ng b√†n ph√≠m v√† nh·∫•n Enter
          </p>
        </div>
      )}

      {/* API Progress */}
      {scanner.apiProgress.isLoading && (
        <div className="p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
          <div className="flex items-center gap-2">
            <div className="animate-spin w-4 h-4 border-2 border-yellow-500 border-t-transparent rounded-full"></div>
            <span className="text-yellow-800 font-medium">
              {scanner.apiProgress.stage === 'scanning' && 'ƒêang x·ª≠ l√Ω m√£ v·∫°ch...'}
              {scanner.apiProgress.stage === 'looking-up' && 'ƒêang tra c·ª©u th√¥ng tin s·∫£n ph·∫©m...'}
            </span>
          </div>
          <p className="text-sm text-yellow-600 mt-1">
            Ngu·ªìn: {scanner.apiProgress.source}
          </p>
        </div>
      )}

      {/* Processing Status */}
      {scanner.isProcessing && !scanner.apiProgress.isLoading && (
        <div className="p-3 bg-green-50 border border-green-200 rounded-lg">
          <div className="flex items-center gap-2">
            <div className="animate-pulse w-2 h-2 bg-green-500 rounded-full"></div>
            <span className="text-green-800 font-medium">ƒêang x·ª≠ l√Ω k·∫øt qu·∫£ qu√©t...</span>
          </div>
        </div>
      )}

      {/* Last Scanned Product */}
      {scanner.lastScannedProduct && (
        <div className="p-4 bg-green-50 border border-green-200 rounded-lg">
          <div className="flex items-start justify-between">
            <div>
              <h3 className="font-semibold text-green-800 mb-2">‚úÖ S·∫£n ph·∫©m v·ª´a qu√©t</h3>
              <div className="space-y-1 text-sm">
                <p><span className="font-medium">M√£ v·∫°ch:</span> {scanner.lastScannedProduct.barcode}</p>
                <p><span className="font-medium">T√™n:</span> {scanner.lastScannedProduct.productInfo?.name || 'Ch∆∞a x√°c ƒë·ªãnh'}</p>
                <p><span className="font-medium">Ph∆∞∆°ng ph√°p:</span> 
                  {scanner.lastScannedProduct.scanMethod === 'camera' && 'üì± Camera'}
                  {scanner.lastScannedProduct.scanMethod === 'keyboard' && '‚å®Ô∏è B√†n ph√≠m'}
                  {scanner.lastScannedProduct.scanMethod === 'manual' && '‚úèÔ∏è Th·ªß c√¥ng'}
                </p>
                <p><span className="font-medium">Th·ªùi gian x·ª≠ l√Ω:</span> {scanner.lastScannedProduct.processingTime}ms</p>
              </div>
            </div>
            <span className="text-2xl">
              {scanner.lastScannedProduct.scanMethod === 'camera' && 'üì±'}
              {scanner.lastScannedProduct.scanMethod === 'keyboard' && '‚å®Ô∏è'}
              {scanner.lastScannedProduct.scanMethod === 'manual' && '‚úèÔ∏è'}
            </span>
          </div>
        </div>
      )}

      {/* Mobile Camera Component */}
      <MobileBarcodeCamera
        isActive={scanner.isCameraActive}
        onBarcodeDetected={scanner.handleCameraScan}
        onClose={scanner.stopCameraScanning}
      />

      {/* Mobile Tips */}
      {isMobile() && (
        <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
          <h3 className="font-semibold text-blue-800 mb-2">üí° M·∫πo s·ª≠ d·ª•ng tr√™n di ƒë·ªông</h3>
          <ul className="text-sm text-blue-700 space-y-1">
            <li>‚Ä¢ Nh·∫•n "Qu√©t B·∫±ng Camera" ƒë·ªÉ s·ª≠ d·ª•ng camera c·ªßa ƒëi·ªán tho·∫°i</li>
            <li>‚Ä¢ ƒê·∫∑t m√£ v·∫°ch trong khung ƒë·ªè ƒë·ªÉ qu√©t t·ª± ƒë·ªông</li>
            <li>‚Ä¢ ƒê·∫£m b·∫£o √°nh s√°ng ƒë·ªß v√† m√£ v·∫°ch r√µ n√©t</li>
            <li>‚Ä¢ C√≥ th·ªÉ chuy·ªÉn ƒë·ªïi gi·ªØa camera tr∆∞·ªõc/sau</li>
          </ul>
        </div>
      )}
    </div>
  )
}
