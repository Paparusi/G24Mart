'use client';

import { useState } from 'react';
import { Store, Settings, Users, Shield, HelpCircle, Globe, Phone, Mail } from 'lucide-react';

interface StoreSetup {
  storeName: string;
  storeType: string;
  address: string;
  phone: string;
  email: string;
  taxCode: string;
  currency: string;
  timezone: string;
  language: string;
}

const STORE_TYPES = [
  'T·∫°p h√≥a & Si√™u th·ªã',
  'Th·ªùi trang',
  'ƒêi·ªán tho·∫°i & ƒêi·ªán m√°y', 
  'M·ªπ ph·∫©m',
  'Nh√† h√†ng - Caf√©',
  'V·∫≠t li·ªáu x√¢y d·ª±ng',
  'N√¥ng s·∫£n & Th·ª±c ph·∫©m',
  'Nh√† thu·ªëc',
  'C·ª≠a h√†ng s√°ch',
  'C·ª≠a h√†ng kh√°c'
];

export default function StoreInitialization() {
  const [currentStep, setCurrentStep] = useState(1);
  const [storeData, setStoreData] = useState<StoreSetup>({
    storeName: '',
    storeType: '',
    address: '',
    phone: '',
    email: '',
    taxCode: '',
    currency: 'VND',
    timezone: 'Asia/Ho_Chi_Minh',
    language: 'vi'
  });

  const [isSetupComplete, setIsSetupComplete] = useState(false);

  const handleInputChange = (field: keyof StoreSetup, value: string) => {
    setStoreData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const nextStep = () => {
    if (currentStep < 4) {
      setCurrentStep(currentStep + 1);
    }
  };

  const prevStep = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    }
  };

  const completeSetup = () => {
    // Save store configuration
    localStorage.setItem('g24mart_store_config', JSON.stringify(storeData));
    setIsSetupComplete(true);
    
    setTimeout(() => {
      window.location.href = '/pos';
    }, 3000);
  };

  if (isSetupComplete) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-green-50 to-blue-50 flex items-center justify-center">
        <div className="bg-white rounded-lg shadow-xl p-12 text-center max-w-md">
          <div className="w-16 h-16 bg-green-500 text-white rounded-full flex items-center justify-center mx-auto mb-6">
            <Store className="w-8 h-8" />
          </div>
          <h2 className="text-2xl font-bold text-gray-800 mb-4">
            üéâ Thi·∫øt l·∫≠p ho√†n t·∫•t!
          </h2>
          <p className="text-gray-600 mb-6">
            C·ª≠a h√†ng "{storeData.storeName}" ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng. B·∫°n s·∫Ω ƒë∆∞·ª£c chuy·ªÉn ƒë·∫øn POS trong gi√¢y l√°t...
          </p>
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-green-500 mx-auto"></div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <Store className="w-8 h-8 text-blue-600" />
              <h1 className="text-2xl font-bold text-gray-900">Kh·ªüi t·∫°o c·ª≠a h√†ng G24Mart</h1>
            </div>
            <div className="text-sm text-gray-500">
              B∆∞·ªõc {currentStep} / 4
            </div>
          </div>
        </div>
      </div>

      {/* Progress Bar */}
      <div className="bg-white border-b">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex">
            {[1, 2, 3, 4].map((step) => (
              <div key={step} className="flex-1">
                <div className={`h-1 ${
                  step <= currentStep ? 'bg-blue-600' : 'bg-gray-200'
                }`}></div>
              </div>
            ))}
          </div>
        </div>
      </div>

      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <div className="bg-white rounded-lg shadow-lg p-8">
          
          {/* Step 1: Basic Information */}
          {currentStep === 1 && (
            <div>
              <div className="text-center mb-8">
                <div className="w-16 h-16 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center mx-auto mb-4">
                  <Store className="w-8 h-8" />
                </div>
                <h2 className="text-2xl font-bold text-gray-900 mb-2">Th√¥ng tin c∆° b·∫£n</h2>
                <p className="text-gray-600">ƒêi·ªÅn th√¥ng tin c∆° b·∫£n v·ªÅ c·ª≠a h√†ng c·ªßa b·∫°n</p>
              </div>

              <div className="space-y-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    T√™n c·ª≠a h√†ng *
                  </label>
                  <input
                    type="text"
                    value={storeData.storeName}
                    onChange={(e) => handleInputChange('storeName', e.target.value)}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="V√≠ d·ª•: C·ª≠a h√†ng ti·ªán l·ª£i ABC"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Lo·∫°i h√¨nh kinh doanh *
                  </label>
                  <select
                    value={storeData.storeType}
                    onChange={(e) => handleInputChange('storeType', e.target.value)}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="">Ch·ªçn lo·∫°i h√¨nh kinh doanh</option>
                    {STORE_TYPES.map(type => (
                      <option key={type} value={type}>{type}</option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ƒê·ªãa ch·ªâ *
                  </label>
                  <textarea
                    value={storeData.address}
                    onChange={(e) => handleInputChange('address', e.target.value)}
                    rows={3}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="S·ªë nh√†, ƒë∆∞·ªùng, ph∆∞·ªùng/x√£, qu·∫≠n/huy·ªán, t·ªânh/th√†nh ph·ªë"
                  />
                </div>
              </div>
            </div>
          )}

          {/* Step 2: Contact Information */}
          {currentStep === 2 && (
            <div>
              <div className="text-center mb-8">
                <div className="w-16 h-16 bg-green-100 text-green-600 rounded-full flex items-center justify-center mx-auto mb-4">
                  <Phone className="w-8 h-8" />
                </div>
                <h2 className="text-2xl font-bold text-gray-900 mb-2">Th√¥ng tin li√™n h·ªá</h2>
                <p className="text-gray-600">Th√¥ng tin li√™n h·ªá s·∫Ω hi·ªÉn th·ªã tr√™n h√≥a ƒë∆°n</p>
              </div>

              <div className="space-y-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    S·ªë ƒëi·ªán tho·∫°i *
                  </label>
                  <input
                    type="tel"
                    value={storeData.phone}
                    onChange={(e) => handleInputChange('phone', e.target.value)}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="0123456789"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Email
                  </label>
                  <input
                    type="email"
                    value={storeData.email}
                    onChange={(e) => handleInputChange('email', e.target.value)}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="shop@example.com"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    M√£ s·ªë thu·∫ø
                  </label>
                  <input
                    type="text"
                    value={storeData.taxCode}
                    onChange={(e) => handleInputChange('taxCode', e.target.value)}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="0123456789"
                  />
                  <p className="text-xs text-gray-500 mt-1">
                    Ch·ªâ c·∫ßn thi·∫øt khi mu·ªën xu·∫•t h√≥a ƒë∆°n VAT
                  </p>
                </div>
              </div>
            </div>
          )}

          {/* Step 3: System Configuration */}
          {currentStep === 3 && (
            <div>
              <div className="text-center mb-8">
                <div className="w-16 h-16 bg-purple-100 text-purple-600 rounded-full flex items-center justify-center mx-auto mb-4">
                  <Settings className="w-8 h-8" />
                </div>
                <h2 className="text-2xl font-bold text-gray-900 mb-2">C·∫•u h√¨nh h·ªá th·ªëng</h2>
                <p className="text-gray-600">Thi·∫øt l·∫≠p t√πy ch·ªçn h·ªá th·ªëng c∆° b·∫£n</p>
              </div>

              <div className="space-y-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ƒê∆°n v·ªã ti·ªÅn t·ªá
                  </label>
                  <select
                    value={storeData.currency}
                    onChange={(e) => handleInputChange('currency', e.target.value)}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="VND">Vi·ªát Nam ƒê·ªìng (VND)</option>
                    <option value="USD">US Dollar (USD)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    M√∫i gi·ªù
                  </label>
                  <select
                    value={storeData.timezone}
                    onChange={(e) => handleInputChange('timezone', e.target.value)}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="Asia/Ho_Chi_Minh">Vi·ªát Nam (GMT+7)</option>
                    <option value="Asia/Bangkok">Thailand (GMT+7)</option>
                    <option value="Asia/Singapore">Singapore (GMT+8)</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Ng√¥n ng·ªØ
                  </label>
                  <select
                    value={storeData.language}
                    onChange={(e) => handleInputChange('language', e.target.value)}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="vi">Ti·∫øng Vi·ªát</option>
                    <option value="en">English</option>
                  </select>
                </div>
              </div>
            </div>
          )}

          {/* Step 4: Confirmation */}
          {currentStep === 4 && (
            <div>
              <div className="text-center mb-8">
                <div className="w-16 h-16 bg-orange-100 text-orange-600 rounded-full flex items-center justify-center mx-auto mb-4">
                  <Shield className="w-8 h-8" />
                </div>
                <h2 className="text-2xl font-bold text-gray-900 mb-2">X√°c nh·∫≠n th√¥ng tin</h2>
                <p className="text-gray-600">Ki·ªÉm tra l·∫°i th√¥ng tin tr∆∞·ªõc khi ho√†n t·∫•t</p>
              </div>

              <div className="bg-gray-50 rounded-lg p-6 space-y-4">
                <div className="grid md:grid-cols-2 gap-4">
                  <div>
                    <span className="text-sm font-medium text-gray-500">T√™n c·ª≠a h√†ng:</span>
                    <p className="text-gray-900 font-medium">{storeData.storeName}</p>
                  </div>
                  <div>
                    <span className="text-sm font-medium text-gray-500">Lo·∫°i h√¨nh:</span>
                    <p className="text-gray-900">{storeData.storeType}</p>
                  </div>
                  <div>
                    <span className="text-sm font-medium text-gray-500">S·ªë ƒëi·ªán tho·∫°i:</span>
                    <p className="text-gray-900">{storeData.phone}</p>
                  </div>
                  <div>
                    <span className="text-sm font-medium text-gray-500">Email:</span>
                    <p className="text-gray-900">{storeData.email || 'Kh√¥ng c√≥'}</p>
                  </div>
                </div>
                <div>
                  <span className="text-sm font-medium text-gray-500">ƒê·ªãa ch·ªâ:</span>
                  <p className="text-gray-900">{storeData.address}</p>
                </div>
              </div>

              <div className="mt-8 p-6 bg-blue-50 border border-blue-200 rounded-lg">
                <h3 className="text-lg font-semibold text-blue-900 mb-2">
                  üöÄ G24Mart vs KiotViet
                </h3>
                <div className="grid md:grid-cols-2 gap-4 text-sm">
                  <div>
                    <h4 className="font-medium text-green-600 mb-2">‚úÖ G24Mart</h4>
                    <ul className="space-y-1">
                      <li>‚Ä¢ Kh·ªüi t·∫°o nhanh ch√≥ng (d∆∞·ªõi 2 ph√∫t)</li>
                      <li>‚Ä¢ Kh√¥ng c·∫ßn t√†i kho·∫£n</li>
                      <li>‚Ä¢ Ho·∫°t ƒë·ªông offline</li>
                      <li>‚Ä¢ Mi·ªÖn ph√≠ vƒ©nh vi·ªÖn</li>
                      <li>‚Ä¢ T√πy ch·ªânh kh√¥ng gi·ªõi h·∫°n</li>
                    </ul>
                  </div>
                  <div>
                    <h4 className="font-medium text-red-600 mb-2">‚ùå KiotViet</h4>
                    <ul className="space-y-1">
                      <li>‚Ä¢ Quy tr√¨nh ph·ª©c t·∫°p</li>
                      <li>‚Ä¢ C·∫ßn ƒëƒÉng k√Ω t√†i kho·∫£n</li>
                      <li>‚Ä¢ L·ªói 503 th∆∞·ªùng xuy√™n</li>
                      <li>‚Ä¢ Ph√≠ t·ª´ 8,000ƒë/ng√†y</li>
                      <li>‚Ä¢ B·ªã h·∫°n ch·∫ø t√≠nh nƒÉng</li>
                    </ul>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Navigation Buttons */}
          <div className="flex justify-between mt-8">
            <button
              onClick={prevStep}
              disabled={currentStep === 1}
              className={`px-6 py-3 rounded-lg font-medium ${
                currentStep === 1
                  ? 'bg-gray-200 text-gray-400 cursor-not-allowed'
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              Quay l·∫°i
            </button>

            {currentStep < 4 ? (
              <button
                onClick={nextStep}
                disabled={
                  (currentStep === 1 && (!storeData.storeName || !storeData.storeType || !storeData.address)) ||
                  (currentStep === 2 && !storeData.phone)
                }
                className="bg-blue-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed"
              >
                Ti·∫øp t·ª•c
              </button>
            ) : (
              <button
                onClick={completeSetup}
                className="bg-green-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-green-700"
              >
                Ho√†n t·∫•t thi·∫øt l·∫≠p
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}
